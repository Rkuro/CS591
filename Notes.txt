591 Notes:

Transpilers: translates from one version of a language to another or one language to another. i.e. Typescript -> Javascript, Javascript 1.5.8 -> Javascript 1.6

Javascript does not have a built in print function.

Blocks are defined by curly braces

Interpreter puts in semicolons for you AT the moment of interpretation.
- However there are cases in which this doesn't work properly (i.e. when trying to constrain the source versus declaring a string "use strict" vs "use strict";)

Also does HOISTING:
Anytime the interpreter finds a variable, it puts it at the top of the file.
- UNLESS you are using let to define it

SCOPE:
If you've created a function, you've created a scope

If you don't use the keyword var, the variable becomes GLOBAL and therefore a global variable

Let binds the variable in the block that it is in, var is global?

By putting the whole file in a closure:
(function() {

...

})()

You can define the scope for the whole file.  This protects against having the same variable names when working on the same project.


cb = callback function

Functions defined inside other functions have scope inside of the parent function, even after the function has returned

Coersion: 
ex.
1 == "1" is TRUE

Javascript converts types when using ==, but does NOT convert types when using ===.

/endcoersion

In Javascript everything is public! (unless you use private: ...)
// remember this is called encapsulation (using an interface to separate the client // from the behavior of the object)

When binding a function to an object's data, use this.data to refer to its own data, otherwise it thinks its a variable declared elsewhere.

Fat arrow notation inside an object does NOT work, or classes!
- If you're only passing 1 argument into a fat arrow function, you don't need the parentheses

JSON is very related to XML which is very structured data (required vs not required, data types explicit, etc)

Git Notes:
Cloning means branching a new version from the master
(Master)  --->o ------------------------->
	  | |		^	   |
 (clone)  | v-----------| (Merge)  |
	  |			   |
	  v -----------------------v---> (Production)



WEEK 2: BACK END

(function() {

})()
^ This is called an Immediately Invoked Function Expression (AKA closures or portable scope), this forces variables to have function scope, or they are only defined within the function.

The Javascript Event Loop: Essentially a scheduler!

Call Stack: Records where we are in the program. Function calls get pushed on the call stack.

Task Queue: Asynchronous callback functions that are waiting to execute

Loop: looks at the stack and the task queue.  Pushes things from the task queue to the call stack. Has to wait until the stack is clear until it can push things from the task queue.

QUESTION: How to know what is asynchronous and what isn't? Like why isn't console.log() asynchronous?
- By adding a callback function, you are essentially making the function asynchronous.  But be careful, this may not always be the case.

Render queue: Browser has a render queue that it wants to output, but it can't render while the call stack is busy!  So synchronous work on the call stack will block the render queue and the user can't see anything!

--- Synchronicity ------
Promises: A way to provide synchronicity to javascripts inherently asynchronous behavior, uses
.then() and .catch() along with resolve() and reject() to control the flow of execution.


NODE AND EXPRESS:

NODE:
Server side javascript engine, using Google V8. HTML router using express, application development framework. Node provides a RESTful state transfer - Node is the model in this architecture.  Front end acts as the controller AND the view, and calls the REST api on the back end.

- Allows work to be done on the front end and back end independently (loosely coupled)

Functionality provided by modules.  npm handles dependencies (i.e. if one package requires another, npm gets both) The front-end equivalent is yarn.

Cons: Lots of packages have dependencies that are irrelevant to what you are doing and may just take up space/overhead.  Node automatically grabs the newest version - this is really bad for production because the newest version might fuck up your code. If the package is removed for any reason, you are screwed (unless you load it locally).


NPM:
npm install - installs the dependencies inside the package.json file


Single page applications: trying to avoid refreshes. Ideally we want a dynamic page without refreshing.


function(req,res,next)
Everytime a request comes in, the information is exposed on the req parameter

next() is the way the middlware is hooked together.  i.e. app.use() is found in the order that they appear. So next() goes to the next appropriate middleware (using pattern matching)

MODULES:

In Javascript a module is a file!


CONFIG files:
Used to differ betweeen production, staging, and development environments.


MONGO:
NOSQL!

Relational DB = built on relations between the data inside tables.
pros - very good at storing structured data
- No duplication (less storage)
- 
cons- not scalable


Non-relational DBs = built using documents
AKA: noSQL
Trade simplicity for performance
Idea: Store all of the necessary data for a record into a single object


Data Access Layer:
1. "CRUD" Create, Read, Update, Delete
2. Translate from CRUD commands into Database Specific Language

- Possibly have json or xml layer between the APP and the DAL so that the application is only speaking json back and forth

Application -> Data Access Layer (DAL) -> Database

- This allows to switch databases relatively easily without rewriting the app

Impedance mismatch -> The data types in the DB don't necessarily match the way we want to use them in the app

ORM -> Object-Relational Mapping, basically a way to take RDB table info and store it in an object

ODM -> Object-Document Management:
Schema: What fields are there, what type, whether required or not, etc. for a particular document type
- We do this with Mongoose!

CREATE - obj.save(), db.<collection>.insert()
READ -  db.<collection>.find({key:value})
UPDATE - db.<collection>.findandupdate()
DELETE - db.<collection>.remove()



Angular:

$scope is the object for the entire application

{{inputText}}  => $scope.inputText

ng-app => app that is used, and defines the module within the html tag that it is assigned to
- ties to angular.module('whatever is put in ng-app', ['ngRoute','ngCookies'])

ng-cntroller => same thing but for the controller 


Javascript dependency injection:
- Passing in a function as a parameter to another function
i.e.:
let calc = (left,right,func) => func(left,right)




